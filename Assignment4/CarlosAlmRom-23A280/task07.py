# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eO3pfxdvlkEe6_XF7BIoDlE3oN72eqGy

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
#RDFLib
def get_subclasses(graph, class_uri):
    subclasses = set()
    for s, p, o in graph.triples((None, RDFS.subClassOf, class_uri)):
        subclasses.add(s)
        subclasses |= get_subclasses(graph, s)
    return subclasses

ns = Namespace("http://somewhere#")
living_thing_subclasses = get_subclasses(g, ns.LivingThing)

for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
    print(s)
for subclass in living_thing_subclasses:
    print(subclass)
    
#SPARQL
q1 = prepareQuery(
    '''SELECT ?subClass
    WHERE { ?subClass rdfs:subClassOf* ns:LivingThing. }''',
    initNs={"rdfs": RDFS, "ns": ns}
)
# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
#RDFLib
#Person & Person subclasses
for s, p, o in g.triples((None, RDF.type, ns.Person)):
    print(s)
#Go through Person subclasses
for sub_class, _, _ in g.triples((None, RDFS.subClassOf, ns.Person)):
    #Go through individuals
    for s, _, _ in g.triples((None, RDF.type, sub_class)):
        print(s)
    #Go through subclasses
    for sub_sub_class, _, _ in g.triples((None, RDFS.subClassOf, sub_class)):
        #Go through individuals of each subclass of the subclass
        for s, _, _ in g.triples((None, RDF.type, sub_sub_class)):
            print(s)
            
#SPARQL
q2 = prepareQuery(
    '''SELECT ?person ?type
    WHERE {
      ?person rdf:type ?type .
      ?type rdfs:subClassOf* ns:Person .
    }''',
  initNs = {"rdf": RDF, "rdfs": RDFS, "ns": ns}
)
# Visualize the results
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
#RDFLIB
#PERSON
for s, p, o in g.triples((None, RDF.type, ns.Person)):
    print(s)
    for s1, p1, o1 in g.triples((s, None, None)):
        print(f"  {p1}: {o1}")
#ANIMAL
for s, p, o in g.triples((None, RDF.type, ns.Animal)):
    print(s)
    for s1, p1, o1 in g.triples((s, None, None)):
        print(f"  {p1}: {o1}")
        
#SPARQL
q3 = prepareQuery(
    ''' SELECT ?person ?class ?property ?value
    WHERE {
        ?person rdf:type ?class .
        ?person ?property ?value .
        FILTER(?class = ns:Person || ?class = ns:Animal)
    }''',
    initNs={"rdf": RDF, "ns": ns}
)
# Visualize the results
for r in g.query(q3):
 print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
from rdflib import FOAF
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0")
foaf = Namespace("http://xmlns.com/foaf/0.1/")

#RDFLiB
for person, _, _ in g.triples((None, FOAF.knows, ns.RockySmith)):
    print(g.value(person, vcard.Given))

#SPARQL
q4 = prepareQuery(
    '''SELECT DISTINCT ?person ?name
    WHERE {
        ?person foaf:knows ns:RockySmith .
        ?person vcard:Given ?name .
    }''',
    initNs={"rdf": RDF, "rdfs": RDFS, "ns": ns, "foaf":FOAF, "vcard":vcard}
)
# Visualize the results
for r in g.query(q4):
 print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
#RDFLib
entities = {}
for s, p, o in g.triples((None, FOAF.knows, None)):
    if s in entities:
        entities[s].add(o)
    else:
        entities[s] = {o}
for entity, persons in entities.items():
    if len(persons) >= 2:
        print(entity)
        
#SPARQL
q5 = prepareQuery(
    '''SELECT ?entity
    WHERE {
        ?entity foaf:knows ?otherEntity .
        ?entity foaf:knows ?otherEntity2 .
        FILTER (?otherEntity != ?otherEntity2)
    }
    GROUP BY ?entity''',
    initNs={"foaf": FOAF}
)
# Visualize the results
for r in g.query(q5):
  print(r)
